/* ========================================================================
 * Bem style helpers.
 * ======================================================================== */

/**
 * Variables
 * ======================================================================== */

stack_storage('bem-settings', {
        p: {
            base:    '',
            layout:  'l',
            utility: 'u',
            state:   'is',
            js:      'js',
        },

        s: {
            p:  '-',             // Bem prefix separator
            e:  '__',            // Bem element separator
            m:  '--',            // Bem mod separator
            mp: '_',             // Bem mod parameter separator
        }
    }, true)                     // Bem mod parameter separator

$bem = stack_storage('bem-settings')
$bem_use_shortcuts ?= false


/**
 * Mixins
 * ======================================================================== */

bem-settings($data=false, $default=false, fallback=false)
    stack_storage('bem-settings', $data, $default, fallback)
    $temp = stack_storage('bem-settings')

    reassign('$bem', $temp)

    return $temp


bem_get_reg_exp()
    /**
     * Block parts regular expression.
     *
     * $3   - Prefix
     * $5   - Block name
     * $8   - Element name
     * $11  - Modificator name
     */
    return '(\.)' +\
        '(([a-z0-9]{1,3})(' + $bem.s.p + ')|)' +\
        '([a-z0-9]+)' +\
        '((' + $bem.s.e + ')([a-z0-9]+)|)' +\
        '((' + $bem.s.m + ')([a-z0-9_]+)|)'


bem_get_selector_parts()
    $parsed = split(reg_replace(selector(), bem_get_reg_exp(),
        '$3,$5,$8,$11'), ',');

    return {
        prefix: $parsed[0]
        block: $parsed[1]
        element: $parsed[2]
        mod: $parsed[3]
    }


bem_get_block_selector()
    $prefix = reg_replace(selector(), bem_get_reg_exp(), '$3')
    $prefix = $prefix ? $prefix : $bem.p.base

    if !$prefix
        return reg_replace(selector(), bem_get_reg_exp(), '$5')
    else
        return $prefix + $bem.s.p +\
            reg_replace(selector(), bem_get_reg_exp(), '$5')


bem_get_element_selector()
    $element_name = reg_replace(selector(), bem_get_reg_exp(), '$8')

    if !$element_name
        return bem_get_block_selector()
    else
        return bem_get_block_selector() + $bem.s.e + $element_name


bem_compose($block_name, $element_name='', $modifer_name='', p=$bem.p.base, m=$modifer_name)
    return (p ? p + $bem.s.p : '') +\
        $block_name +\
        ($element_name ? $bem.s.e + $element_name : '') +\
        (m ? $bem.s.m + m : '')


/**
 * Bem block mixins.
 *
 * WARNING: Don't use this mixins for now! Partially working.
 *
 * Unfortunately in some cases those things wouldn't work now beause of stylus
 * have problems with selectors in the block mixins.
 */

/**
 * Bem block.
 */
bem_b($block_name, $prefix=bem-settings().p.base)
    $name = bem_compose($block_name, $p:$prefix)

    if block is defined
        /.{$name}
            {block}
    else
        return $name


/**
 * Bem block placeholders namespace.
 */
bem_p()
    if block is defined
        /${bem_get_element_selector()}{$bem.s.m}
            {block}
    else
        return bem_get_element_selector() + $bem.s.m


/**
 * Bem block elements namespace.
 */
bem_e()
    if block is defined
        &{$bem.s.e}
            {block}
    else
        return bem_get_block_selector() + $bem.s.e


/**
 * Bem block modifers namespace.
 */
bem_m()
    if block is defined
        &{$bem.s.m}
            {block}
    else
        return bem_get_element_selector() + $bem.s.m


/**
 * Bem block states namespace.
 */
bem_s()
    if block is defined
        &.{$bem.p.state}{$bem.s.p}
            {block}
    else
        return selector('&') + '.' + $bem.p.state + $bem.s.p


/**
 * Bem shortcuts for the namespace mixins.
 */
if $bem_use_shortcuts
    b = bem_b
    e = bem_e
    m = bem_m

